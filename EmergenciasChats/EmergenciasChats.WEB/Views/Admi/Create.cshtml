@model EmergenciasChats.EL.AdminEL

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link href="~/Content/sweetalert2.css" rel="stylesheet" />

<link href="~/Content/formulario.css" rel="stylesheet" />
<body @*onload="MyonLoad"*@>

    <form class="form__padre" id="form__padre" @*autocomplete="off"*@>

        <div class="titulo__crear-cuenta-iniciar-sesion">
            <h1 class="crear__cuenta">Crear Cuenta</h1>
            <span><a class="iniciar__sesion" href="@Url.Action("logi","Admi")">Iniciar sesión</a></span>
        </div>

        <h3 class="es__gratis">Es Gratis!</h3>

        <div class="maxl">
            <label class="form__label" for="IDAdmin">   </label>
            <input type="hidden" name="IDAdmin" id="IDAdmin" value="">
        </div>

        <div class="form__grupo" id="grupo__nombre">
            <label class="form__label" for="nombre"><b>Nombres</b></label>
            @Html.EditorFor(model => model.Nombres, new { htmlAttributes = new { @class = "form__input-input", placeholder = "Esteban" } })
            @Html.ValidationMessageFor(model => model.Nombres, "", new { @class = "form__input" })

            <p class="form__input-error">El apellido solo puede contener letras y espacios.</p>
        </div>

        <div class="form__grupo" id="grupo__apellido">
            <label class="form__label" for="apellido">Apellidos</label>
            @Html.EditorFor(model => model.Apellidos, new { htmlAttributes = new { @class = "form__input-input", placeholder = "Alayon" } })
            @Html.ValidationMessageFor(model => model.Apellidos, "", new { @class = "form__input" })

            <p class="form__input-error">El apellido solo puede contener letras y espacios.</p>
        </div>

        <div class="form__grupo" id="grupo__sexo">
            <label class="form__label" for="sexo">Sexo</label>
            @Html.EditorFor(model => model.Sexo, new { htmlAttributes = new { @class = "form__input-input", placeholder = "Masculino/Femenino" } })
            @Html.ValidationMessageFor(model => model.Sexo, "", new { @class = "form__input-error" })
            <p class="form__input-error">El sexo solo puede contener letras y espacios.</p>
        </div>
        <div class="form__grupo" id="grupo__Dui">
            <label class="form__label" for="Dui">Dui</label>
            @Html.EditorFor(model => model.Dui, new { htmlAttributes = new { @class = "form__input-input", placeholder = "05646424-5" } })
            @Html.ValidationMessageFor(model => model.Dui, "", new { @class = "form__input-error" })
        </div>

        <div class="form__grupo" id="grupo__direccion">
            <label class="form__label" for="Dui">Direccion</label>
            @Html.EditorFor(model => model.Direccion, new { htmlAttributes = new { @class = "form__input-input", placeholder = "Sonzacate Sonsonate" } })
            @Html.ValidationMessageFor(model => model.Direccion, "", new { @class = "form__input-error" })
        </div>

        <div class="form__grupo" id="grupo__user">
            <label class="form__label" for="user">Usuario Nombre</label>
            @Html.EditorFor(model => model.NameUser, new { htmlAttributes = new { @class = "form__input-input", placeholder = "juan soza" } })
            @Html.ValidationMessageFor(model => model.NameUser, "", new { @class = "form__input-error" })
        </div>

        <div class="form__grupo" id="grupo__telefono">
            <label class="form__label" for="telefono">Telefono</label>
            @Html.EditorFor(model => model.Telefono, new { htmlAttributes = new { @class = "form__input-input", placeholder = "75635-7373" } })
            @Html.ValidationMessageFor(model => model.Telefono, "", new { @class = "form__input-error" })
        </div>

        <div class="form__grupo" id="grupo__correo">
            <label class="form__label" for="correo">Correo Electrónico</label>
            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form__input-input", placeholder = "correo@gmail.com" } })
            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "form__input-error" })
            <p class="form__input-error">El correo solo puede contener letras, numero, guion y guion bajo.</p>
        </div>

        <div class="form__terminos">
            <div class="maxl">
                <label class="radio inline">
                    <input type="hidden" name="Estado" id="Estado" value="True" checked>
                </label>
            </div>
        </div>
        <div class="form__grupo" id="grupo__Password">
            <label class="form__label" for="Password"> Contraseña</label>
            @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form__input-input", placeholder = "Digite su contraseña" } })
            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "form__input-error" })

            <p class="form__input-error">La contraseña solo puede contener de 4 a 16 dígitos.</p>
        </div>






        <!--select  llenarcombo-->
        <div>
            <select name=".myDropDownLisTId" id=".myDropDownLisTId">
                <option> Selecciona tu Rol</option>
                @*<option value="-MG0RGYBtR4UHtER11z8"></option>
                <option value="-MG0oGiGJZj3Av9yYabS"></option>*@
                <option value="">Administrador</option>
                <option value=""> Usuario</option>

            </select>
        </div>












        @*<script >
                function onLoad() {
                    cargar_OpcionesDesdeFirebase2()

                }
                function cargar_OpcionesDesdeFirebase2() {
                    refRol = firebase.database().ref().child("rol");
                    refRol.on("value", function (snap) {
                        let datos = snap.val();
                        console.log(datos)

                        for (let key in datos) {
                            let arrayFirebase = datos[key].NombreRol
                            console.log(arrayFirebase);
                            addOptions("opciones-de-firebase2", arrayFirebase);
                        }
                    });
                }
            //ruta de opcines al select
                function addOptions(domElement, arrayFirebase) {
                    var select = document.getElementByName(domElement)[0];
                   // for (value in arrayFirebase) {
                        var option = document.createElement("option");
                        option.text = arrayFirebase;
                        select.add(option);
                    //}
                }

            </script>*@

        <!--select combo-->
        @*<select id="rol" onchange="ShowSelected();" class="seleccion" name="rol">
                <option value="seleccion">Selecciona un tipo de rol</option>
                <option value="MG0RGYBtR4UHtER11z8"></option>
                <option value="MG0oGiGJZj3Av9yYabS"></option>

            </select>*@



        <div class="form__terminos">
            <label class="form__label" for="terminos">
                <input class="form__checkbox" type="checkbox" id="terminos" name="terminos">
                Acepto los Términos y Condiciones
            </label>
        </div>
        <div class="form__mensaje" id="form__mensaje">
            <p> <b>Error:</b> Completa todos los campos correctamente.</p>
        </div>
        <!--create div -->
        <div class="form__btn" id="form__btn">
            <input type="submit" class="btnRegister" value="Create" />
            <!--<p class="form__mensaje-exitoso" id="form__mensaje-exitoso">Su cuenta se creo correctamente.</p>-->
        </div>
        <div class="container__otra-opcion">
            <span class="span">
                <a class="otra__opcion" href="#">Olvide mi contraseña</a>
            </span>
        </div>
    </form>
</body>
<!---->
<br />
<div> 
    <a href="@Url.Action("AdminLista", "Admi")" class="btn btn-primary"> Ver lista</a>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval") 

 
    <!--llenar combo-->
        @*<script src="~/Scripts/llenarcombo.js"></script>*@
    <!-- validacion de campos-->
    <script src="~/Scripts/formulario.js"></script>
    <script src="~/Scripts/metodo.js"></script>
    <script src="~/Scripts/sweetalert2.all.min.js"></script>
    <script>
        $(document).ready(function () {
            //cargar_OpcionesDesdeFirebase2();
           // GetDropDownData();
            //MyonLoad();
                $('form').submit(function (e) {
                    e.preventDefault();
                    var data = $(this).serializeFormJSON();
                    Create("Admi", data);
                });
            });
    </script>
   
}





